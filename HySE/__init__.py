# import numpy as np
# import cv2
# import os
# from datetime import datetime
# from scipy.signal import savgol_filter, find_peaks
# import matplotlib
# from matplotlib import pyplot as plt
# import imageio
# from mpl_toolkits.axes_grid1 import make_axes_locatable


# hyse/__init__.py

import pkgutil
import importlib
import types
import inspect
import textwrap

__all__ = []

# Dynamically import all submodules and expose their functions
for loader, module_name, is_pkg in pkgutil.iter_modules(__path__):
	module = importlib.import_module(f"{__name__}.{module_name}")
	for name, obj in inspect.getmembers(module, inspect.isfunction):
		if obj.__module__ == f"{__name__}.{module_name}" and not name.startswith("_"):
			globals()[name] = obj
			__all__.append(name)



def help(name=None):
	"""
	Display available HySE functions or detailed help on a specific module/function. Generated by chatGPT

	Usage:
		help()                           ‚Üí lists all modules and their functions
		help('ModuleName')              ‚Üí lists functions defined in that module
		help('ModuleName.FunctionName') ‚Üí shows docstring of that specific function
	"""
	if name is None:
		print("HySE - Overview of Available Modules and Their Functions\n")
		print("  Use `HySE.help('ModuleName')` to list functions in a module.")
		print("  Use `HySE.help('ModuleName.FunctionName')` for full details on a function.\n")
		for loader, mod_name, is_pkg in pkgutil.iter_modules(__path__):
			print(f"üì¶ {mod_name}")
			submodule = importlib.import_module(f"{__name__}.{mod_name}")
			funcs = [
				name for name, obj in inspect.getmembers(submodule, inspect.isfunction)
				if obj.__module__ == f"{__name__}.{mod_name}" and not name.startswith("_")
			]
			for f in funcs:
				print(f"    ‚îî‚îÄ‚îÄ {f}")
		return

	if "." in name:
		# Case: HySE.help("Module.Function")
		mod_name, func_name = name.split(".", 1)
		try:
			submodule = importlib.import_module(f"{__name__}.{mod_name}")
			func = getattr(submodule, func_name, None)
			if func is None or not inspect.isfunction(func):
				print(f"‚ùå Function '{func_name}' not found in module '{mod_name}'")
				return
			if func.__module__ != f"{__name__}.{mod_name}":
				print(f"‚ö†Ô∏è '{func_name}' is not a user-defined function in module '{mod_name}'")
				return
			sig = str(inspect.signature(func))
			doc = inspect.getdoc(func) or "No docstring available."
			print(f"üßæ Help for '{mod_name}.{func_name}{sig}':\n")
			print(doc)
		except ModuleNotFoundError:
			print(f"‚ùå Module '{mod_name}' not found.")
	else:
		# Case: HySE.help("Module")
		try:
			submodule = importlib.import_module(f"{__name__}.{name}")
			funcs = [
				obj for _, obj in inspect.getmembers(submodule, inspect.isfunction)
				if obj.__module__ == f"{__name__}.{name}" and not obj.__name__.startswith("_")
			]
			if not funcs:
				print(f"No user-defined functions found in module '{name}'")
				return
			print(f"\nüß∞ Functions in module '{name}':\n")
			for func in funcs:
				sig = str(inspect.signature(func))
				doc = inspect.getdoc(func)
				summary = textwrap.shorten(doc, width=100) if doc else "No docstring available."
				print(f"üîπ {func.__name__}{sig}\n    {summary}\n")
		except ModuleNotFoundError:
			print(f"‚ùå Module '{name}' not found in HySE.")

